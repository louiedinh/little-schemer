#lang racket

;; Environment 

(define (build a b)
  (list a b))

(define new-entry build)

(define (lookup-in-entry name entry entry-f)
  (lookup-in-entry-help name
                        (first entry)
                        (second entry)
                        entry-f))

(define (lookup-in-entry-help name names values entry-f)
  (cond ((empty? names) (entry-f name))
        ((eq? (first names) name) (first values))
        (else (lookup-in-entry-help name (rest names) (rest values) entry-f))))

(define extend-table cons)

(define (lookup-in-table name table table-f)
  (cond ((empty? table) (table-f name))
        (else (lookup-in-entry name 
                               (first table)
                               (lambda (name)
                                 (lookup-in-table 
                                  name
                                  (rest table)
                                  table-f))))))


(define (atom? x) (and (not (pair? x)) (not (empty? x))))

;; Converting Expressions to actions

(define (expression-to-action e)
  (cond ((atom? e) (atom-to-action e))
        (else (list-to-action e))))

(define (atom-to-action e)
  (cond ((number? e) *const)
        ((eq? e #t) *const)
        ((eq? e #f) *const)
        ((eq? e 'cons) *const)
        ((eq? e 'car) *const)
        ((eq? e 'cdr) *const)
        ((eq? e 'null?) *const)
        ((eq? e 'eq?) *const)
        ((eq? e 'atom?) *const)
        ((eq? e 'zero?) *const)
        ((eq? e 'add1) *const)
        ((eq? e 'sub1) *const)
        ((eq? e 'number?) *const)
        (else *identifier)))

(define list-to-action 
  (lambda (e)
    (cond ((atom? (car e))
           (cond ((eq? (car e) 'quote) *quote)
                 ((eq? (car e) 'lambda) *lambda)
                 ((eq? (car e) 'cond) *cond)
                 (else *application)))
          (else *application))))

(define (value e) (meaning e '()))

(define (meaning e table) ((expression-to-action e) e table))

;; Actions

(define (*const e table)
  (cond ((number? e) e)
        ((eq? e #t) #t)
        ((eq? e #f) #f)
        (else (build 'primitive e))))

(define (*quote e table) (text-of e))
(define text-of second)

(define (*identifier e table)
  (lookup-in-table e table initial-table))
(define (initial-table name)
  (car '()))

(define (*lambda e table)
  (build 'non-primitive
         (cons table (cdr e))))
(define table-of first)
(define formals-of second)
(define body-of third)

(define (*cond e table)
(evcon (cond-lines-of e) table))
(define cond-lines-of cdr)
(define (evcon lines table)
(define (else? x)
  (cond ((atom? x) (eq? x 'else))
        (else #f)))
  (cond ((else? (question-of (car lines)))
         (meaning (answer-of (car lines)) table))
        ((meaning (question-of (car lines)) table)
         (meaning (answer-of (car lines)) table))
        (else (evcon (cdr lines) table))))
(define question-of first)
(define answer-of second)                    

(define *application
  (lambda (e table)
    (apply (meaning (function-of e) table)
           (evlis (arguments-of e) table))))
(define function-of car)
(define arguments-of cdr)
(define (evlis li e)
  (if (empty? li)
      '()
      (cons (meaning (car li) e) (evlis (cdr li) e))))
(define (primitive? e)
  (eq? (first e) 'primitive))
(define (non-primitive? e)
  (eq? (first e) 'non-primitive))

(define (apply func args)
  (cond ((primitive? func) (apply-primitive (second func) args))
        ((non-primitive? func) (apply-closure (second func) args))))

(define (apply-primitive func-name args)
  (cond ((eq? func-name 'eq?) (eq? (first args) (second args)))
        ((eq? func-name 'cons) (cons (first args) (second args)))
        ((eq? func-name 'car) (car (first args)))
        ((eq? func-name 'cdr) (cdr (first args)))
        ((eq? func-name 'zero?) (zero? (first args)))
        ((eq? func-name 'add1) (+ 1 (first args)))
        ((eq? func-name 'sub1) (- 1 (first args)))
        ((eq? func-name 'number?) (number? (first args)))
        ((eq? func-name 'null?) (null? (first args)))
        ((eq? func-name 'atom?) (_atom? (first args)))))

(define (_atom? arg)
 (cond ((atom? arg) #t)
       ((null? arg) #f)
       ((eq? (first arg) 'primitive) #t)
       ((eq? (first arg) 'non-primitive) #t)
       (else #f)))

(define (apply-closure closure args)
  (meaning (body-of closure)
           (extend-table (new-entry (formals-of closure)
                                    args)
                         (table-of closure))))

